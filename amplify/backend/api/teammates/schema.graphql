type User @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  username: String!
  email: String!
  favouriteTeams: [Team] @hasMany(indexName: "byUser", fields: ["id"])
  searchHistory: [Search] @hasMany(indexName: "byUser", fields: ["id"])
}

type Team @model {
  id: ID!
  name: String!
  players: [Player] @hasMany(indexName: "byTeam", fields: ["id"])
}

type Player @model {
  id: ID!
  name: String!
  position: String
  teamID: ID! @index(name: "byTeam", queryField: "playersByTeam")
}

type Search @model {
  id: ID!
  userID: ID! @belongsTo(fields: ["userID"])
  team1: String!
  team2: String!
  timestamp: AWSDateTime!
  commonPlayers: [Player] @manyToMany(relationName: "SearchCommonPlayers")
}

type Query {
  getCommonPlayers(team1: String!, team2: String!): [Player]
}

type Mutation {
  createUser(username: String!, email: String!): User
  createTeam(name: String!): Team
  createPlayer(name: String!, position: String, teamID: ID!): Player
  createSearch(userID: ID!, team1: String!, team2: String!, commonPlayers: [ID!]): Search
}
